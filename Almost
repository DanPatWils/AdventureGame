# Starter code for an adventure type game.
# University of Utah, David Johnson, 2017.
# This code, or code derived from this code, may not be shared without permission.

import sys, pygame, math

# This function loads a series of sprite images stored in a folder with a
# consistent naming pattern: sprite_# or sprite_##. It returns a list of the images.
def load_piskell_sprite(sprite_folder_name, number_of_frames):
    frame_counts = []
    padding = math.ceil(math.log(number_of_frames,10))
    for frame in range(number_of_frames):
        folder_and_file_name = sprite_folder_name + "/sprite_" + str(frame).rjust(padding,'0') +".png"
        frame_counts.append(pygame.image.load(folder_and_file_name).convert_alpha())

    return frame_counts

def load_tiles_and_make_dict_and_rect():
    # Load the tiles
    sand = pygame.image.load("map/Sand.png").convert_alpha() # (206, 206, 46, 255)
    tile_rect = sand.get_rect()
    plains = pygame.image.load("map/Plains.png").convert_alpha() # (126, 206, 46, 255)
    swamp = pygame.image.load("map/Swamp.png").convert_alpha() # (14,64,14,255)
    dirt = pygame.image.load("map/Dirt.png").convert_alpha() # (117,94,21,255)
    water = pygame.image.load("map/water2.png").convert_alpha() # (0, 176, 255, 255)
    rocks = pygame.image.load("map/Rocky.png").convert_alpha() # (39, 39, 21, 255)

    # Make a dictionary of the tiles for easy access
    tiles = {}
    tiles[(206, 206, 46, 255)] = sand
    tiles[(126, 206, 46, 255)] = plains
    tiles[(39, 39, 21, 255)] = rocks
    tiles[(0, 176, 255, 255)] = water
    tiles[(117,94,21,255)] = dirt
    tiles[(14,64,14,255)] = swamp

    return (tiles, tile_rect)

# The main loop handles most of the game
def main():

    # Initialize pygame
    pygame.init()

    screen_size = width, height = (700, 500)
    screen = pygame.display.set_mode(screen_size)

    # create the hero character
    hero = load_piskell_sprite("prospector",21)
    hero_rect = hero[0].get_rect()
    hero_rect.center = (350,250)

    # add in Rock
    rock = pygame.image.load("Rock.png").convert_alpha()
    rock_rect = rock.get_rect()
    rock_rect.center = 800, 200

    # add in Detonator item
    detonator = pygame.image.load("Detonator.png").convert_alpha()
    detonator_rect = detonator.get_rect()
    detonator_rect.center = 150,800

    # add in TNT item
    tnt = pygame.image.load("TNT.png").convert_alpha()
    tnt_rect = tnt.get_rect()
    tnt_rect.center = 250, -200

    #add in Fuse item
    fuse = pygame.image.load("Fuse.png").convert_alpha()
    fuse_rect = fuse.get_rect()
    fuse_rect.center = -150, 350

    # Load a big image map
    map = pygame.image.load("big.png").convert()
    map_rect = map.get_rect()
    map_rect.center = 350, 250

    # Load a minimap
    world = pygame.image.load("map/testMap smaller.png").convert()
    world_rect = world.get_rect()
    # Set the offset into the map
    (mapx, mapy) = (0, 0)



    # Get the tiles that define different terrain types
    tiles, tile_rect = load_tiles_and_make_dict_and_rect()

    # Calculate how many tiles fit on screen
    map_tile_width = (width // tile_rect.width) + 1
    map_tile_height = (height // tile_rect.height) + 1

    # The clock helps us manage the frames per second of the animation
    clock = pygame.time.Clock()

    # Mostly used to cycle the animation of sprites
    frame_count = 0;

    # variable to show if we are still playing the game
    playing = True

    # variable for hero direction
    is_facing_left = True

    # Variable to track text on the screen. If you set the dialog string to something and set the position and the
    # counter, the text will show on the screen for dialog_counter number of frames.
    dialog_counter = 0
    dialog = ''
    dialog_position = (0,0)

    # Load font
    pygame.font.init() # you have to call this at the start,
                   # if you want to use this module.
    myfont = pygame.font.SysFont('Comic Sans MS', 30)


    # create the inventory and make it empty
    inventory = {}

    # This list should hold all the sprite rectangles that get shifted with a key press.
    rect_list = [rock_rect, detonator_rect, tnt_rect, fuse_rect, map_rect]

    # This is the top left corner of the view into the minimap
    mapx = 0
    mapy = 0

    # Loop while the player is still active
    while playing:
        # start the next frame
        screen.fill((170,190,190))

        # Check events by looping over the list of events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                playing = False

        # check for keys that are pressed
        # Note the indent makes it part of the while playing but not part of the for event loop.
        keys = pygame.key.get_pressed()
        # check for specific keys
        # movement says how the world should shift. Pressing keys changes the value in the movement variables.
        movement_x = 0
        movement_y = 0

        if keys[pygame.K_LEFT]:
            is_facing_left = True
            movement_x -= tile_rect.width
            mapx -= 1
        if keys[pygame.K_RIGHT]:
            is_facing_left = False
            movement_x += tile_rect.width
            mapx += 1
        if keys[pygame.K_UP]:
            movement_y -= tile_rect.height
            mapy -= 1
        if keys[pygame.K_DOWN]:
            movement_y += tile_rect.height
            mapy += 1

        if mapx < 0:
            mapx = 0
            movement_x = 0
        if mapx > world.get_width()-1 - map_tile_width:
            mapx = world.get_width()-1 - map_tile_width
            movement_x = 0
        if mapy < 0:
            mapy = 0
            movement_y = 0
        if mapy > world.get_height()-1 - map_tile_height:
            mapy = world.get_height()-1 - map_tile_height
            movement_y = 0

        # Move all the sprites in the scene by movement amount.
        # You can still move the rect of an individual sprite to make
        # it move around the landscape.
        for rect in rect_list:
            rect.move_ip(-movement_x, -movement_y)

        # Check for touching rock.
        if hero_rect.colliderect(rock_rect):
            # Respond differently depending on gold status
            if "detonator" and "TNT" and "fuse" in inventory:
                dialog = "You've done it! Now blow up the rock!"
            else:
                dialog = "What're you doin'? Git the supplies!"
            # These say where and for how long the dialog prints on the screen
            dialog_counter = 50
            dialog_position = (100, 100)

        # Check for touching the detonator.
        if hero_rect.colliderect(detonator_rect) and "detonator" not in inventory:
            inventory["detonator"] = True
            dialog = "You got the Detonator!"
            dialog_counter = 30
            dialog_position = (300, 200)

        # Check for touching the TNT
        if hero_rect.colliderect(tnt_rect) and "TNT" not in inventory:
            inventory["TNT"] = True
            dialog = "You got the TNT"
            dialog_counter = 30
            dialog_position = (300, 200)

        # Check for touching the fuse
        if hero_rect.colliderect(fuse_rect) and "fuse" not in inventory:
            inventory["fuse"] = True
            dialog = "You got the Fuse!"
            dialog_counter = 30
            dialog_position = (300, 200)

        # Draw the map
        for y in range(0, map_tile_height):
            # offset y
            y_index = y + mapy
            for x in range(0, map_tile_width):
                # offset x
                x_index = x + mapx
                pixelColor = world.get_at((x_index, y_index))
                # The tile is draw at the pixel location scaled up
                tile_rect.topleft = (x * tile_rect.width, y * tile_rect.height)
                # if pixelColor == (206, 206, 46, 255):
                #     screen.blit(sand, tile_rect)
                # if pixelColor == (126, 206, 46, 255):
                #     screen.blit(plains, tile_rect)
                # if pixelColor == (14,64,14,255):
                #     screen.blit(swamp, tile_rect)
                # Draw the tile that corresponds to the pixel color we found.
                screen.blit(tiles[tuple(pixelColor)], tile_rect)

        # Draw the characters
        screen.blit(rock, rock_rect)
        pygame.draw.rect(screen, (0,255,0), rock_rect, 3)

        # Only draw the detonator if it hasn't been picked up
        if "detonator" not in inventory:
            screen.blit(detonator, detonator_rect)

        # Only draw the TNT if it hasn't been picked up
        if "TNT" not in inventory:
            screen.blit(tnt, tnt_rect)

        # Only draw the fuse if it hasn't been picked up
        if "fuse" not in inventory:
            screen.blit(fuse, fuse_rect)

        # Pick the sprite frame to draw
        hero_sprite = hero[frame_count%len(hero)]
        # Flip the sprite depending on direction
        if not is_facing_left:
            hero_sprite = pygame.transform.flip(hero_sprite, True, False)
        screen.blit(hero_sprite, hero_rect)
        pygame.draw.rect(screen, (0,255,0), hero_rect, 3)



        # draw any dialog
        if dialog:
            textsurface = myfont.render(dialog, False, (0, 0, 0))
            screen.blit(textsurface, dialog_position)
            # Track how long the dialog is on screen
            dialog_counter -= 1
            if dialog_counter == 0:
                dialog = ''

        screen.blit(world,world_rect)
        pygame.draw.rect(screen, (255, 0, 0), (mapx, mapy, map_tile_width, map_tile_height), 2)

        # Bring drawn changes to the front
        pygame.display.update()

        frame_count += 1

        # 30 fps
        clock.tick(30)

    # loop is over
    pygame.quit()
    sys.exit()

# Start the program
main()
